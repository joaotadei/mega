{"version":3,"file":"static/js/299.43b3250a.chunk.js","mappings":"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","sources":["pages/public/FirstAccess/index.tsx","utils/usernameHandler.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\nimport { Button, toast, Typography, useTheme } from \"@stardust-ds/react\";\r\nimport Input from \"components/Input\";\r\nimport { useFormik } from \"formik\";\r\nimport useStore from \"hooks/useStore\";\r\nimport { shallow } from \"zustand/shallow\";\r\nimport { Logo } from \"styles/global\";\r\nimport { usernameSchema } from \"validations/yup/publicSchemas\";\r\nimport { AccessCard } from \"components/AccessWrapper/styles\";\r\nimport AccessWrapper from \"components/AccessWrapper\";\r\nimport PublicSuccessMessage from \"components/PublicSuccessCard\";\r\nimport { AxiosError } from \"axios\";\r\nimport { clearCNPJorCPF, handleUsernameMask, userNameIsEmail } from \"utils/usernameHandler\";\r\n\r\nconst FirstAccess: React.FC = () => {\r\n    const theme = useTheme();\r\n    const {api } = useStore(state => ({\r\n      api: state.getApi(),\r\n    }), shallow);\r\n  \r\n  const [showMessage, setShowMessage] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: '',\r\n    },\r\n    validateOnChange: false,\r\n    validationSchema: usernameSchema,\r\n    onSubmit: async (body) => {\r\n      try {\r\n        const params = {\r\n          username: userNameIsEmail(body.username)? body.username: clearCNPJorCPF(body.username),\r\n        };\r\n        const { data } = await api.post('auth/first_access', params);\r\n        setMessage(data.message);\r\n        setShowMessage(true);\r\n      }catch(err) {\r\n        if(err instanceof AxiosError){\r\n          toast({\r\n            type: \"error\",\r\n            description: err?.response?.data?.message,\r\n            position: \"bottom-right\",\r\n          });\r\n        }\r\n      }\r\n      finally {\r\n        formik.setSubmitting(false);\r\n      }\r\n    }\r\n  });\r\n\r\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const name = e.target.name;\r\n      e.target.value = handleUsernameMask(e.target.value);\r\n\r\n      formik.setFieldError(name, '');\r\n      formik.handleChange(e);\r\n  }, [formik]);\r\n\r\n  return (\r\n    <AccessWrapper>\r\n      {\r\n        showMessage? \r\n        <PublicSuccessMessage\r\n          title=\"Senha enviada com sucesso!\"\r\n          description={message}\r\n          goToLogin={true}\r\n        /> :\r\n        <AccessCard>\r\n            <Logo src={require('assets/images/logo_mega_3.png')}></Logo>\r\n            <Typography data-title fontSize='lg' mTop=\"md\" color={theme.brand.color.primary.pure}>\r\n                Preencha seu E-mail ou CNPJ ou CPF abaixo\r\n            </Typography>\r\n            <Typography data-title fontSize='xs' fontFamily=\"Open Sans, sans-serif\" mTop=\"nano\" textAlign=\"center\" fontWeight=\"normal\" mBottom='sm' color={theme.brand.color.primary.pure}>\r\n                Você receberá por e-mail o link para concluir seu acesso\r\n            </Typography>\r\n            <Input\r\n                name='username'\r\n                placeholder='E-mail, CPF ou CNPJ'\r\n                mBottom='xxs'\r\n                value={formik.values.username}\r\n                error={formik.errors.username}\r\n                onChange={handleInputChange}\r\n                />\r\n            <Button onClick={() => formik.handleSubmit()} type='button' disabled={formik.isSubmitting} mBottom='xs' bgColor={theme.brand.color.primary.pure} isFullWidth mTop='sm'>\r\n                Receber\r\n            </Button>\r\n        </AccessCard>\r\n      }\r\n    </AccessWrapper>\r\n  );\r\n}\r\n\r\nexport default FirstAccess;","export const handleUsernameMask = (inputValue: string) => {\r\n    if (userNameIsEmail(inputValue)) {\r\n      return inputValue;\r\n    }\r\n\r\n    const value = clearCNPJorCPF(inputValue);\r\n    if ((/^\\d*$/.test(value))) {\r\n      return  value.length <= 11?\r\n      value.replace(/(\\d{3})(\\d{3})(\\d{3})/, '$1.$2.$3-'):\r\n      value.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})/, '$1.$2.$3/$4-');\r\n    }\r\n\r\n    return inputValue;\r\n  };\r\n\r\n  export const userNameIsEmail = (inputValue: string) => {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(inputValue);\r\n  };\r\n\r\n  export const clearCNPJorCPF = (inputValue: string) => {\r\n   return inputValue.replace(/[.-/]/g, '').replace(/-(?!>)/g, '');\r\n  };"],"names":["FirstAccess","theme","useTheme","api","useStore","state","getApi","shallow","showMessage","setShowMessage","useState","message","setMessage","formik","useFormik","initialValues","username","validateOnChange","validationSchema","usernameSchema","onSubmit","async","params","userNameIsEmail","body","clearCNPJorCPF","data","post","err","_err$response","_err$response$data","AxiosError","toast","type","description","response","position","setSubmitting","handleInputChange","useCallback","e","name","target","value","handleUsernameMask","setFieldError","handleChange","_jsx","AccessWrapper","children","PublicSuccessMessage","title","goToLogin","_jsxs","AccessCard","Logo","src","require","Typography","fontSize","mTop","color","brand","primary","pure","fontFamily","textAlign","fontWeight","mBottom","Input","placeholder","values","error","errors","onChange","Button","onClick","handleSubmit","disabled","isSubmitting","bgColor","isFullWidth","inputValue","test","length","replace"],"sourceRoot":""}