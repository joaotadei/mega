{"version":3,"file":"static/js/348.0bf5f598.chunk.js","mappings":"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","sources":["components/ContractCard/styles.ts","components/ContractCard/index.tsx","components/LoadAnimation/styles.ts","components/LoadAnimation/index.tsx","pages/private/client/Contract/styles.ts","../node_modules/date-fns/isDate.mjs","../node_modules/date-fns/toDate.mjs","../node_modules/date-fns/isValid.mjs","../node_modules/date-fns/_lib/addLeadingZeros.mjs","../node_modules/date-fns/_lib/format/lightFormatters.mjs","../node_modules/date-fns/lightFormat.mjs","pages/private/client/Contract/index.tsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nexport const Container = styled.a`\r\n  width: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: stretch;\r\n  ${({ theme }) => css`\r\n  \r\n    background-color: ${theme.neutrals.pureWhite};\r\n    outline-color: ${theme.neutrals.gray3};\r\n    border-radius: ${theme.borderRadius.lg}px;\r\n    box-shadow: ${theme.brand.boxShadow.level2};\r\n    transition: all ease-in-out 300ms;\r\n    header {\r\n      color: ${theme.brand.color.primary.dark};\r\n      padding: ${theme.spacing.xxs}px ${theme.spacing.xxxs}px ${theme.spacing.md}px;\r\n    }\r\n    footer {\r\n      margin-top: 20px;\r\n      .buttons {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: stretch;\r\n        gap: 20px;\r\n        display: flex;\r\n        flex-direction: columm;\r\n        padding: ${theme.spacing.xs}px;\r\n      }\r\n    }\r\n    &:hover {\r\n      box-shadow: ${theme.brand.boxShadow.level4};\r\n    }\r\n    @media screen and (max-width: ${theme.brand.media_query.tablet}) {\r\n      width: 178px;\r\n    }\r\n    @media screen and (max-width: ${theme.brand.media_query.mobile}) {\r\n      width: 100%;\r\n      header p {\r\n        font-size: ${theme.fontSize.xs}px !important;\r\n      }\r\n    }\r\n  `}\r\n`;\r\n","import { Button, Typography, useTheme } from '@stardust-ds/react';\r\nimport { Container } from './styles';\r\nimport Icon from 'assets/icons/Icon';\r\nimport useRouteHandler from 'hooks/useRouteHandler';\r\nimport React from 'react';\r\n\r\ninterface IProps {\r\n  href?: React.HTMLProps<HTMLAnchorElement>['href'];\r\n  onClick?: React.HTMLProps<HTMLAnchorElement>['onClick'];\r\n  className?: React.HTMLProps<HTMLAnchorElement>['className'];\r\n  description?: string;\r\n  description2?: string;\r\n  state?: any;\r\n  footer?: boolean;\r\n}\r\n\r\nconst ContractCard: React.FC<IProps> = ({ description, description2, state, footer, ...rest }) => {\r\n  const theme = useTheme();\r\n  const { handleClickHref, to } = useRouteHandler();\r\n  return (\r\n    <Container onClick={(e) => handleClickHref(e, false, state)} {...rest} >\r\n      <header>\r\n        <Typography fontWeight='extraBold' fontSize='sm' type='p1' textAlign='center' mBottom='sm'>\r\n          {description}\r\n        </Typography>\r\n        <Typography fontWeight='bold' fontSize='xxl' type='p1' textAlign='center' color={theme.brand.color.primary.medium}>\r\n          {description2}\r\n        </Typography>\r\n      </header>\r\n      {\r\n        footer?\r\n        <footer>\r\n        <hr/>\r\n        <div className='buttons'>\r\n          <Button \r\n            onClick={() => to('contracts')}\r\n            iconLeft={<Icon\r\n              icon={'arrows_rotate-light'}\r\n              size={theme.fontSize.xs}\r\n            />} \r\n            bgColor={theme.brand.color.secondary.pure}>\r\n            SELECIONAR OUTRO CONTRATO\r\n          </Button>\r\n          <Button \r\n            iconLeft={<Icon\r\n              icon={'clock_rotate_left-light'}\r\n              size={theme.fontSize.xs}\r\n          />} \r\n            bgColor={theme.brand.color.secondary.pure}>\r\n            VER HISTÓRICO DE PAGAMENTOS\r\n          </Button>\r\n        </div>\r\n      </footer> : \r\n      <></>\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ContractCard;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin-top: 200px;\r\n  .animation-content {\r\n    padding: 10px;\r\n    width: 650px;\r\n    height: 100px;\r\n  }\r\n`;\r\n","import { Typography, useTheme } from '@stardust-ds/react';\r\nimport Lottie from 'lottie-react';\r\nimport React from 'react';\r\n\r\nimport { Container } from './styles';\r\n\r\nconst LoadAnimation: React.FC = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Container>\r\n        <Typography color={theme.brand.color.primary.medium} fontSize='lg'>\r\n          Só um pouquinho!\r\n        </Typography>\r\n        <Typography color={theme.brand.color.primary.medium} fontSize='xs' fontWeight=\"regular\">\r\n          Estamos carregando suas informações\r\n        </Typography>\r\n      <Lottie\r\n        animationData={require('assets/load_Animation.json')}\r\n        className='animation-content'\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default LoadAnimation;","import styled, { css } from \"styled-components\";\r\nimport { PrivateContainer } from \"styles/global\";\r\n\r\nexport const Container = styled(PrivateContainer)`\r\n${({ theme }) => css`\r\noverflow: hidden;\r\nbackground-color: ${theme.neutrals.gray1};\r\ndisplay: flex;\r\nflex-direction: column;\r\n.content-overview {\r\n    margin-top: 25px;\r\n    background-color: transparent;\r\n    padding: 32px 24px;\r\n}\r\n.client {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 100px;\r\n}\r\n.month{\r\n    margin-top: 70px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 50px;\r\n    span{\r\n        padding-left: 6px;\r\n        padding-right: 6px;\r\n        border-style: solid;\r\n        border-radius: 25px;\r\n        border-width: 1px;\r\n        border-color: ${theme.brand.color.secondary.pure};\r\n    }\r\n}\r\n.amount{\r\n    margin-top: 15px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 10px;\r\n    button{\r\n        border-radius: 25px;\r\n        height: 30px;\r\n    }\r\n}\r\n.card-plan {\r\n    top: 250px;\r\n    width: 100%;\r\n    max-height: 271px;\r\n    background-color: #FFF;\r\n    padding: 32px 24px;\r\n    box-shadow: rgba(0, 0, 0, 0.05) 0px 4px 20px;\r\n    .client-info {\r\n        \r\n    }\r\n    .description-plan {\r\n        position: relative;\r\n        left: 65%;\r\n        bottom: 240px;\r\n        @media screen and (max-width: 1200px) {\r\n            left: 60%;\r\n        }\r\n    }\r\n}\r\n.card-billing {\r\n    background-color: transparent;\r\n    padding: 32px 24px;\r\n    .card {\r\n        align-items: flex-start;\r\n        margin-top: 20px;\r\n        cursor: pointer;\r\n        padding: 10px;\r\n        width: 100px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        background-color: rgb(255, 255, 255);\r\n        outline-color: rgb(204, 209, 214);\r\n        border-radius: 8px;\r\n        box-shadow: rgba(0, 0, 0, 0.15) 0px 4px 20px;\r\n        transition: all 300ms ease-in-out 0s;\r\n    }\r\n}\r\n`}\r\n`;\r\n\r\nexport const ContentHeader = styled.div`\r\ndislpay: flex;\r\nbackground-color: transparent !important;\r\n`;","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.floor(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { lightFormatters } from \"./_lib/format/lightFormatters.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { lightFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @private\n */\n\n/**\n * @name lightFormat\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. Unlike `format`,\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n *\n * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   |\n * |---------------------------------|---------|-----------------------------------|\n * | AM, PM                          | a..aaa  | AM, PM                            |\n * |                                 | aaaa    | a.m., p.m.                        |\n * |                                 | aaaaa   | a, p                              |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n * |                                 | yy      | 44, 01, 00, 17                    |\n * |                                 | yyy     | 044, 001, 000, 017                |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n * |                                 | MM      | 01, 02, ..., 12                   |\n * | Day of month                    | d       | 1, 2, ..., 31                     |\n * |                                 | dd      | 01, 02, ..., 31                   |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n * |                                 | hh      | 01, 02, ..., 11, 12               |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n * |                                 | HH      | 00, 01, 02, ..., 23               |\n * | Minute                          | m       | 0, 1, ..., 59                     |\n * |                                 | mm      | 00, 01, ..., 59                   |\n * | Second                          | s       | 0, 1, ..., 59                     |\n * |                                 | ss      | 00, 01, ..., 59                   |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\n * |                                 | SS      | 00, 01, ..., 99                   |\n * |                                 | SSS     | 000, 001, ..., 999                |\n * |                                 | SSSS    | ...                               |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n *\n * @returns The formatted date string\n *\n * @throws `Invalid time value` if the date is invalid\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n * //=> '2014-02-11'\n */\nexport function lightFormat(date, formatStr) {\n  const _date = toDate(date);\n\n  if (!isValid(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const tokens = formatStr.match(formattingTokensRegExp);\n\n  // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n  if (!tokens) return \"\";\n\n  const result = tokens\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\";\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring);\n      }\n\n      const formatter = lightFormatters[firstCharacter];\n      if (formatter) {\n        return formatter(_date, substring);\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return substring;\n    })\n    .join(\"\");\n\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  const matches = input.match(escapedStringRegExp);\n\n  if (!matches) {\n    return input;\n  }\n\n  return matches[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default lightFormat;\n","import { useDebouncedEffect } from \"@react-hookz/web\";\r\nimport { Button, Typography, useTheme } from \"@stardust-ds/react\";\r\nimport { useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { TContract } from \"types/contract\";\r\nimport { shallow } from \"zustand/shallow\";\r\nimport { Container } from \"./styles\"\r\nimport Icon from \"assets/icons/Icon\";\r\nimport ContractCard from \"components/ContractCard\";\r\nimport useStore from \"hooks/useStore\";\r\nimport LoadAnimation from \"components/LoadAnimation\";\r\nimport format from \"date-fns/lightFormat\";\r\n\r\nconst Home: React.FC = () => {\r\n  const theme = useTheme();\r\n  const { id } = useParams<string>();\r\n  const { api, user } = useStore(state => \r\n    ({\r\n      api: state.getApi(),\r\n      user: state.user\r\n    }), shallow);\r\n    const [contract, setContract] = useState<TContract>();\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n     useDebouncedEffect(async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const { data } = await api.get<TContract>(`contracts/${id}`);\r\n        setContract(data);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }, [api], 300);\r\n\r\n    return (\r\n      <Container>\r\n        {\r\n          isLoading? <LoadAnimation/> :\r\n          <>\r\n            <div className=\"content-overview\">\r\n              <Typography color={theme.brand.color.primary.medium} fontSize='lg'>\r\n                Resumo de Consumo\r\n              </Typography>\r\n              <Typography color={theme.brand.color.primary.medium} fontSize='xxs' fontWeight='normal'>\r\n                Informação atualizada em {format(new Date(), \"dd'/'MM'/'yyyy HH:mm\")}\r\n              </Typography>\r\n            </div>\r\n            <div className=\"card-plan\">\r\n              <div className=\"client-info\">\r\n                <div className=\"client\">\r\n                  <Typography color={theme.brand.color.primary.medium} fontSize='md'>\r\n                    Olá, {user.name}\r\n                  </Typography>\r\n                  <Typography color={theme.brand.color.primary.medium} fontSize='xxs' >\r\n                    Vencimento : {contract?.currentInvoice.dueDate}\r\n                  </Typography>\r\n                </div>\r\n                <div className=\"billing\">\r\n                  <div className=\"month\">\r\n                    <Typography color={theme.brand.color.primary.medium} fontSize='md'>\r\n                      Conta em aberto\r\n                    </Typography>\r\n                    <span>\r\n                      <Typography color={theme.brand.color.secondary.pure} fontSize='xs'>\r\n                        {contract?.currentInvoice.referenceMonth}\r\n                      </Typography>\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"amount\">\r\n                    <Typography fontSize='lg'>\r\n                      R$ {contract?.currentInvoice.amount}\r\n                    </Typography>\r\n                    <Button \r\n                      iconLeft={<Icon\r\n                        icon={'bar_code-light'}\r\n                        size={theme.fontSize.xs}\r\n                        />}\r\n                      bgColor={theme.brand.color.secondary.pure}>\r\n                      GERAR BOLETO\r\n                    </Button>\r\n                    <Button\r\n                      iconLeft={<Icon\r\n                        icon={'document-light'}\r\n                        size={theme.fontSize.xs}\r\n                      />} \r\n                      bgColor={theme.brand.color.secondary.pure}>\r\n                      GERAR NFe</Button>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"description-plan\">\r\n              <ContractCard\r\n                description={contract?.description}\r\n                description2={contract?.description2}\r\n                footer={true}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"card-billing\">\r\n            <Typography color={theme.brand.color.primary.medium} fontSize={'md'}>\r\n              Fatura\r\n            </Typography>\r\n            <div className=\"card\">\r\n              <Icon\r\n                icon={'document-regular'}\r\n                size={theme.fontSize.lg}\r\n                color={theme.brand.color.primary.medium}\r\n              />\r\n              <Typography fontSize={'xxs'}>\r\n                 2º Via da fatura\r\n              </Typography>\r\n            </div>\r\n          </div>\r\n        </>\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  export default Home;"],"names":["Container","styled","a","_templateObject","_taggedTemplateLiteral","_ref","theme","css","_templateObject2","neutrals","pureWhite","gray3","borderRadius","lg","brand","boxShadow","level2","color","primary","dark","spacing","xxs","xxxs","md","xs","level4","media_query","tablet","mobile","fontSize","description","description2","state","footer","rest","useTheme","handleClickHref","to","useRouteHandler","_jsxs","onClick","e","children","_jsx","Typography","fontWeight","type","textAlign","mBottom","medium","className","Button","iconLeft","Icon","icon","size","bgColor","secondary","pure","_Fragment","div","LoadAnimation","Lottie","animationData","require","PrivateContainer","gray1","_templateObject3","isDate","value","Date","Object","prototype","toString","call","toDate","argument","argStr","constructor","NaN","isValid","date","_date","isNaN","Number","addLeadingZeros","number","targetLength","Math","abs","padStart","lightFormatters","y","token","signedYear","getFullYear","year","length","M","month","getMonth","String","d","getDate","dayPeriodEnumValue","getHours","toUpperCase","h","H","m","getMinutes","s","getSeconds","S","numberOfDigits","milliseconds","getMilliseconds","floor","pow","formattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","formatStr","RangeError","tokens","match","map","substring","firstCharacter","input","matches","replace","cleanEscapedString","formatter","join","Home","id","useParams","api","user","useStore","getApi","shallow","contract","setContract","useState","isLoading","setIsLoading","useDebouncedEffect","async","data","get","concat","format","name","currentInvoice","dueDate","referenceMonth","amount","ContractCard"],"sourceRoot":""}