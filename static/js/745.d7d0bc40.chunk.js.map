{"version":3,"file":"static/js/745.d7d0bc40.chunk.js","mappings":"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","sources":["pages/public/Login/styles.ts","pages/public/Login/index.tsx","utils/usernameHandler.ts"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nexport const Bottom = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  @media screen and (max-width: ${({ theme }) =>\r\n  theme.brand.media_query.mobile}) {\r\n    margin-top: auto;\r\n  } \r\n  `;\r\n  \r\n  export const RenewPassLink = styled.a`\r\n  background: none;\r\n  border: none;\r\n  outline: 0;\r\n  font-family: Open Sans, sans-serif;\r\n  transition: all ease-in 200ms;\r\n  ${({ theme }) => css`\r\n    color: ${theme.brand.color.primary.pure};\r\n    font-size: ${theme.fontSize.xxs}px;\r\n    cursor: pointer;\r\n    &:hover {\r\n      opacity: 0.8;\r\n    }\r\n    &:active {\r\n      opacity: 0.6;\r\n      color: ${theme.brand.color.secondary.medium};\r\n    }\r\n  `}\r\n`;\r\n","import { useCallback } from \"react\";\r\nimport { Button, toast, Typography, useTheme } from \"@stardust-ds/react\";\r\nimport { AxiosError } from \"axios\";\r\nimport Input from \"components/Input\";\r\nimport { useFormik } from \"formik\";\r\nimport useStore from \"hooks/useStore\";\r\nimport { loginSchema } from \"validations/yup/publicSchemas\";\r\nimport { Bottom, RenewPassLink } from \"./styles\";\r\nimport { Logo } from \"styles/global\";\r\nimport AccessWrapper from \"components/AccessWrapper\";\r\nimport { AccessCard } from \"components/AccessWrapper/styles\";\r\nimport useRouteHandler from \"hooks/useRouteHandler\";\r\nimport { clearCNPJorCPF, handleUsernameMask, userNameIsEmail } from \"utils/usernameHandler\";\r\n\r\nconst Login: React.FC = () => {\r\n    const signin = useStore(state => state.signin);\r\n    const theme = useTheme();\r\n    const { to } = useRouteHandler();\r\n    \r\n    const formik = useFormik({\r\n        initialValues: {\r\n          username: '',\r\n          password: '',\r\n        },\r\n        validateOnChange: false,\r\n        validationSchema: loginSchema,\r\n        onSubmit: async ({...data}) => {\r\n          try {\r\n            const params = {\r\n              username: userNameIsEmail(data.username)? data.username: clearCNPJorCPF(data.username),\r\n              password: data.password\r\n            };\r\n\r\n            await signin(params);\r\n          } catch(err) {\r\n            if(err instanceof AxiosError){\r\n              toast({\r\n                type: \"error\",\r\n                description: err?.response?.data?.message,\r\n                position: \"bottom-right\",\r\n              });\r\n            }\r\n          } finally {\r\n            formik.setSubmitting(false);\r\n          }\r\n        }\r\n    });\r\n\r\n    const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const name = e.target.name;\r\n        formik.setFieldError(name, '');\r\n\r\n        if(name === 'username'){\r\n          e.target.value = handleUsernameMask(e.target.value);\r\n        }\r\n\r\n        formik.handleChange(e);\r\n    }, [formik]);\r\n\r\n    return (\r\n        <AccessWrapper>\r\n          <AccessCard>\r\n            <Logo src={require('assets/images/logo_mega_3.png')}></Logo>\r\n            <Typography fontSize='lg' fontFamily=\"Open Sans, sans-serif\" mTop=\"md\" color={theme.brand.color.primary.pure}>\r\n                Olá, seja bem-vindo \r\n            </Typography>\r\n            <Typography fontSize='xs' fontFamily=\"Open Sans, sans-serif\" mTop=\"nano\" fontWeight=\"normal\" mBottom='sm' color={theme.brand.color.primary.pure}>\r\n                Faça o login em sua conta\r\n            </Typography>\r\n            <Input\r\n                name='username'\r\n                placeholder='Login'\r\n                mBottom='xxs'\r\n                value={formik.values.username}\r\n                error={formik.errors.username}\r\n                onChange={handleInputChange}\r\n                />\r\n            <Input \r\n                name='password'\r\n                isPass\r\n                placeholder='Senha'\r\n                value={formik.values.password}\r\n                error={formik.errors.password}\r\n                onChange={handleInputChange}\r\n                />\r\n            <Button onClick={() => to('firstAccess')} type='button' bgColor={theme.brand.color.secondary.pure} isFullWidth mTop='sm'>\r\n                Primeiro acesso\r\n            </Button>\r\n            <Button onClick={() => formik.handleSubmit()} mTop='xxxs' type='button' disabled={formik.isSubmitting} mBottom='xs' bgColor={theme.brand.color.primary.pure} isFullWidth>\r\n                Entrar\r\n            </Button>\r\n            <Bottom>\r\n              <RenewPassLink onClick={() => to('renewPassword')}>\r\n                Esqueceu a senha?\r\n              </RenewPassLink>\r\n            </Bottom>\r\n          </AccessCard>\r\n        </AccessWrapper>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","export const handleUsernameMask = (inputValue: string) => {\r\n    if (userNameIsEmail(inputValue)) {\r\n      return inputValue;\r\n    }\r\n\r\n    const value = clearCNPJorCPF(inputValue);\r\n    if ((/^\\d*$/.test(value))) {\r\n      return  value.length <= 11?\r\n      value.replace(/(\\d{3})(\\d{3})(\\d{3})/, '$1.$2.$3-'):\r\n      value.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})/, '$1.$2.$3/$4-');\r\n    }\r\n\r\n    return inputValue;\r\n  };\r\n\r\n  export const userNameIsEmail = (inputValue: string) => {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(inputValue);\r\n  };\r\n\r\n  export const clearCNPJorCPF = (inputValue: string) => {\r\n   return inputValue.replace(/[.-/]/g, '').replace(/-(?!>)/g, '');\r\n  };"],"names":["Bottom","styled","div","_templateObject","_taggedTemplateLiteral","_ref","theme","brand","media_query","mobile","RenewPassLink","a","_templateObject2","_ref2","css","_templateObject3","color","primary","pure","fontSize","xxs","secondary","medium","Login","signin","useStore","state","useTheme","to","useRouteHandler","formik","useFormik","initialValues","username","password","validateOnChange","validationSchema","loginSchema","onSubmit","async","data","params","userNameIsEmail","clearCNPJorCPF","err","_err$response","_err$response$data","AxiosError","toast","type","description","response","message","position","setSubmitting","handleInputChange","useCallback","e","name","target","setFieldError","value","handleUsernameMask","handleChange","_jsx","AccessWrapper","children","_jsxs","AccessCard","Logo","src","require","Typography","fontFamily","mTop","fontWeight","mBottom","Input","placeholder","values","error","errors","onChange","isPass","Button","onClick","bgColor","isFullWidth","handleSubmit","disabled","isSubmitting","inputValue","test","length","replace"],"sourceRoot":""}